<?php

/**
 * My Application bootstrap file.
 */
use Nette\Application\Routers\Route,
    Nette\Application\Routers\RouteList,
    Nette\Application\Routers\SimpleRouter,
    \Nette\Application\UI\Presenter;

// Load Nette Framework or autoloader generated by Composer
require LIBS_DIR . '/autoload.php';


// Configure application
$configurator = new Nette\Config\Configurator;

// Enable Nette Debugger for error visualisation & logging
//Nette\Diagnostics\Debugger::$productionMode = true;
//$configurator->setDebugMode(array("78.45.163.71"));
$configurator->enableDebugger(__DIR__ . '/log');
//$configurator->setDebugMode(false);

function barDump($x) {
    Nette\Diagnostics\Debugger::barDump($x);
}

// Enable RobotLoader - this will load all classes automatically
$configurator->setTempDirectory(__DIR__ . '/temp');
$configurator->createRobotLoader()
        ->addDirectory(APP_DIR)
        ->addDirectory(LIBS_DIR)
        ->register();

// Create Dependency Injection container from config.neon file
$configurator->addConfig(__DIR__ . '/config.neon');
if(file_exists(__DIR__ . '/config-server.neon'))
	$configurator->addConfig(__DIR__ . '/config-server.neon');
$container = $configurator->createContainer();

// Connect to the database
dibi::connect($container->parameters['database']);



// Setup router
$list = implode("|", array_keys(\Casopisy\CasopisModel::getCasopisyURL()));

Route::$defaultFlags = Route::SECURED;

$container->router[] = $adminRouter = new RouteList('Admin');
$adminRouter[] = new Route("admin/<casopis $list>/<presenter>[/<action>][/<id>]", array(
            'casopis' => array(
                Route::VALUE => 0,
                Route::FILTER_TABLE => \Casopisy\CasopisModel::getCasopisyURL(),
            ),
            'presenter' => 'Casopis',
            'action' => 'default',
        ));


$container->router[] = $frontRouter = new RouteList('Front');
$frontRouter[] = new Route('data/thumbs/<id>-<page>[-<hash>][.<opts>].png', 'File:preview');
$frontRouter[] = new Route('[index.php]', 'Homepage:default');
$frontRouter[] = new Route('login[/<action>]', "Login:default");
$frontRouter[] = new Route("<casopis $list>/tagy/<id .*>", array(
	'casopis' => array(Route::FILTER_TABLE => \Casopisy\CasopisModel::getCasopisyURL()),
	'presenter' => 'Casopis',
	'action' => 'default',
));
$frontRouter[] = new Route("<casopis $list>/<id [0-9]+>[/<action>]", array(
	'casopis' => array(Route::FILTER_TABLE => \Casopisy\CasopisModel::getCasopisyURL()),
	'presenter' => 'Cislo',
	'action' => 'default',
));
$frontRouter[] = new Route("<casopis $list>/r/<id>", array(
	'casopis' => array(Route::FILTER_TABLE => \Casopisy\CasopisModel::getCasopisyURL()),
	'presenter' => 'Rocnik',
	'action' => 'default',
));
$frontRouter[] = new Route("<casopis $list>/<presenter>[/<id [0-9]+>][/<action>]", array(
	'casopis' => array(Route::FILTER_TABLE => \Casopisy\CasopisModel::getCasopisyURL()),
	'presenter' => 'Casopis',
	'action' => 'default',
));
$frontRouter[] = new Route('<presenter>/<action>[.php][/<id>]', "Homepage:default");



// --------------   extensions -------------------
Presenter::extensionMethod('isAdminModule', function (Presenter $that) {
      return strpos($that->getName(), "Admin:") === 0;
    });

Nette\Templating\FileTemplate::extensionMethod('mesic', function ($that, $s) {
	if (isset(Casopisy\CasopisModel::$months[$s]))
		return Casopisy\CasopisModel::$months[$s];
	return $s;
});

Nette\Templating\FileTemplate::extensionMethod('modified', function ($that, $s) {
			return $s . "?". dechex(filemtime(WWW_DIR.$s));
		});

Nette\Templating\FileTemplate::extensionMethod('linkify', function ($that, $s, $safe = true) {
	if($safe) $s = htmlspecialchars($s);
	$s = nl2br($s);
	$s = preg_replace('~==([^=]+)==[\r\n]+~is', '<h2>\\1</h2>', $s); //... ==h2==
	$s = preg_replace('~\*([^*]+)\*~iU', '<b>\\1</b>', $s);	         //... **bold**
	$s = preg_replace('~(https?://)([^ \n\r\t]+)~is', '<a href="\\1\\2" target="_blank">\\2</a>', $s); //http[s]://...
	return $s;
});

Nette\Templating\FileTemplate::extensionMethod('highlight', function ($that, $s, $query) {
	$words = join('|', explode(' ', preg_quote($query)));
	$s = htmlspecialchars($s, 0, 'UTF-8');
	return Nette\Utils\Strings::replace($s, '#'.$words.'#iu', "<span class=\"highlight\">\$0</span>");
});

/*

    public static function highlight($text, $phrase) {
        if (trim($phrase) == '')
            return $text;
        $re = preg_split('~[\s,]+~', preg_quote(trim($phrase)));
        foreach ($re as $idx => $srch) {
            $re[$idx] = self::prepare_search_term($srch);
        }
        return preg_replace('#' . implode('|', $re) . '#iu', '<span class="highlight">$0</span>', $text);
    }

    private static function prepare_search_term($search, $delim = '#') {
        //$search = preg_quote($search,$delim);
        $search = preg_replace('/[aàáâãåäæ]/iu', '[aàáâãåäæ]', $search);
        $search = preg_replace('/[cč]/iu', '[cč]', $search);
        $search = preg_replace('/[dď]/iu', '[dď]', $search);
        $search = preg_replace('/[eèéêëě]/iu', '[eèéêëě]', $search);
        $search = preg_replace('/[iìíîïí]/iu', '[iìíîïí]', $search);
        $search = preg_replace('/[nň]/iu', '[nň]', $search);
        $search = preg_replace('/[oòóôõöø]/iu', '[oòóôõöø]', $search);
        $search = preg_replace('/[rř]/iu', '[rř]', $search);
        $search = preg_replace('/[sš]/iu', '[sš]', $search);
        $search = preg_replace('/[tť]/iu', '[tť]', $search);
        $search = preg_replace('/[uùúûüů]/iu', '[uùúûüů]', $search);
        $search = preg_replace('/[yý]/iu', '[yý]', $search);
        $search = preg_replace('/[zž]/iu', '[zž]', $search);

        return $search;
    }
*/


// Configure and run the application!
//$container->application->catchExceptions = true;
$container->application->run();
